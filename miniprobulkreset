#!/usr/bin/python3
#	miniprobulkreset - Bulk resetting of microcontrollers using a TL866
#	Copyright (C) 2020-2020 Johannes Bauer
#
#	This file is part of miniprobulkreset.
#
#	miniprobulkreset is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	miniprobulkreset is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with miniprobulkreset; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import os
import json
import subprocess
import tempfile
from FriendlyArgumentParser import FriendlyArgumentParser
from HexDump import HexDump

default_config = os.path.dirname(os.path.realpath(__file__)) + "/configuration.json"

parser = FriendlyArgumentParser(description = "Bulk-reset devices and reset their fuse configuration using the MiniPro TL866.")
parser.add_argument("-d", "--dbfile", metavar = "filename", type = str, default = default_config, help = "Specifies configuration database file to use. Defaults to %(default)s.")
parser.add_argument("-b", "--binary", metavar = "filename", type = str, default = "minipro", help = "Specifies the 'minipro' binary to use. Defaults to %(default)s.")
parser.add_argument("-n", "--no-erase", action = "store_true", help = "Do not erase device, just print the current state.")
parser.add_argument("-f", "--force", action = "store_true", help = "Try to read and erase device even if it does not return correct signature.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("device", help = "Specify the device to use.")
args = parser.parse_args(sys.argv[1:])

class MiniproBulkResetter():
	def __init__(self, args):
		self._args = args
		with open(self._args.dbfile) as f:
			self._config = json.load(f)

		self._devname = self._args.device.lower()
		if self._devname not in self._config:
			raise Exception("Unknown device: %s" % (self._devname))
		self._device = self._config[self._devname]

	def _execute(self, cmd):
		if self._args.verbose >= 2:
			stdout = None
			stderr = None
		else:
			stdout = subprocess.DEVNULL
			stderr = subprocess.DEVNULL
		return subprocess.run(cmd, stdout = stdout, stderr = stderr)

	def _fuse_parse(self, fuse_content):
		fuse_values = { }
		for line in fuse_content.decode().strip("\r\n").split("\n"):
			(name, value) = line.split(" = ")
			fuse_values[name] = int(value, 16)
		return fuse_values

	def _get_content(self):
		content = { }
		with tempfile.NamedTemporaryFile() as f:
			for area in [ "code", "data", "config" ]:
				cmd = [ self._args.binary, "-p", self._device["minipro-name"], "-c", area, "-r", f.name ]
				if self._args.force:
					cmd += [ "-y" ]
				result = self._execute(cmd)
				if result.returncode != 0:
					raise Exception("Unable to read memory area \"%s\" of %s." % (area, self._device["minipro-name"]))
				with open(f.name, "rb") as f:
					content[area] = f.read()
		content["config"] = self._fuse_parse(content["config"])
		return content

	def _erase_device(self):
		if self._args.verbose >= 1:
			print("Erasing Flash ROM and EEPROM.")
		cmd = [ self._args.binary, "-p", self._device["minipro-name"], "-E" ]
		if self._args.force:
			cmd += [ "-y" ]
		self._execute(cmd)

	def _erase_config(self):
		if self._args.verbose >= 1:
			print("Resetting configuration data.")
		with tempfile.NamedTemporaryFile("w") as f:
			for (name, value) in self._device["stock-config"].items():
				print("%s = 0x%x" % (name, value), file = f)
			f.flush()
			cmd = [ self._args.binary, "-p", self._device["minipro-name"], "-c", "config", "-w", f.name ]
			if self._args.force:
				cmd += [ "-y" ]
			self._execute(cmd)

	def _check_stock(self, content):
		is_stock = {
			"code":		set(content["code"]) == set([ 0xff ]),
			"data":		set(content["data"]) == set([ 0xff ]),
			"config":	content["config"] == self._device["stock-config"],
		}
		return is_stock

	def run(self):
		content = self._get_content()
		is_stock = self._check_stock(content)

		parts = [ ]
		parts.append("Flash %s" % ("empty" if is_stock["code"] else "USED"))
		parts.append("EEPROM %s" % ("empty" if is_stock["data"] else "USED"))
		parts.append("Fuses %s" % ("default" if is_stock["config"] else "MODIFIED"))
		print("   ".join(parts))

		if self._args.verbose >= 3:
			if not is_stock["code"]:
				HexDump().dump(content["code"])
			if not is_stock["data"]:
				HexDump().dump(content["data"])

		if (not is_stock["config"]) and (self._args.verbose >= 1):
			for (name, value) in sorted(content["config"].items()):
				if name not in self._device["stock-config"]:
					print("Fuse %s: has 0x%02x, stock is unknown (not in configuration)" % (name, value))
				elif value != self._device["stock-config"][name]:
					print("Fuse %s: has 0x%02x, stock is 0x%02x (XOR 0x%02x)" % (name, value, self._device["stock-config"][name], value ^ self._device["stock-config"][name]))

		if self._args.no_erase:
			return

		if (not is_stock["code"]) or (not is_stock["data"]):
			self._erase_device()

		if not is_stock["config"]:
			self._erase_config()

		if not all(is_stock.values()):
			# Something was erased, check if it worked.
			content = self._get_content()
			is_stock = self._check_stock(content)
			if all(is_stock.values()) and (self._args.verbose >= 1):
				print("Device reset successful.")
			elif not all(is_stock.values()):
				print("Device reset FAILED, some parts still modified.")

mbr = MiniproBulkResetter(args)
mbr.run()
